/**
 *  Home Remote
 *
 *  Copyright 2018 The Home Remote
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License. You may obtain a copy of the License at:
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed
 *  on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License
 *  for the specific language governing permissions and limitations under the License.
 *
 */

definition(
    name: "Home Remote",
    namespace: "thehomeremote.homeremote",
    author: "The Home Remote",
    description: "Web service that enables communication between the Home Remote app and a Hubitat Home Elevation hub.",
	iconUrl: "https://s3.amazonaws.com/smartapp-icons/Convenience/Cat-Convenience.png",
    iconX2Url: "https://s3.amazonaws.com/smartapp-icons/Convenience/Cat-Convenience@2x.png",
    iconX3Url: "https://s3.amazonaws.com/smartapp-icons/Convenience/Cat-Convenience@2x.png"
)
	
import groovy.json.JsonBuilder

//API Endpoints
mappings {
    // Synchronize
    path("/sync") 							{	action: [	GET: "sync"        				]}
    // Poll
    path("/poll") 							{	action: [	GET: "poll"        				]}
    // Allowed Attributes
    path("/allowedAttributes") 				{	action: [	GET: "getAllowedAttributes"     ]}
	// Execute Command
    path("/executeCommand") 				{	action: [	PUT: "executeCommand"   		]}
}



/* Capabiities List 
Unused and or don't follow the below rules have been commented out.  Might increase polling speed to comment out unused. 
Items may work if "//" is removed (and it follows the below rules), but those functions haven't been tested.
Rules: Only 1 attribute per line.  Columns 3 & 4 capitalized for Home Remote compatibility. Columns 2 needs to be unique - possibly 3 & 4 as well (unsure).  
List of built in Home Remote capabilities (match if possible): https://groups.google.com/forum/#!topic/thehomeremote/WK54m_jwPaM
Could not find list of known Hubitat capabilities, but they generally seem to match up besides capitalization. */
private def getCapabilities() { 

    [   //Capability in Hubitat						Name in Hubitat UI				Capability in Home Remote		Attribute       
//        ["capability.accelerationSensor",			"Acceleration Sensor",			"Acceleration",					"Acceleration"],
//        ["capability.actuator",						"Actuator",						"Actuator",						""],
//        ["capability.alarm",						"Alarm",						"Alarm",						"Alarm"],
//        ["capability.audioNotification",			"Audio Notification",			"AudioNotification",			""],
        ["capability.battery",						"Battery",						"Battery",						"Battery"],
//        ["capability.beacon",						"Beacon",						"Beacon",						"Presence"],
//        ["capability.button",						"Button",						"Button",						"Button"],
//        ["capability.carbonDioxideMeasurement",		"Carbon Dioxide Measurement",	"CarbonDioxideMeasurement",		"CarbonDioxide"],
//        ["capability.carbonMonoxideDetector",		"Carbon Monoxide Detector",		"CarbonMonoxideDetector",		"CarbonMonoxide"],
		["capability.colorControl",					"Color",						"ColorControl",					"Color"],
//		["capability.colorControl",					"Hue",							"HueDevice",					"Hue"],
//        ["capability.colorControl",					"Saturation",					"SaturationDevice",				"Saturation"],
        ["capability.colorTemperature",				"Color Temperature",			"ColorTemperature",				"ColorTemperature"],
//        ["capability.consumable",					"Consumable",					"Consumable",					"Consumable"],
        ["capability.contactSensor",	  			"Contact",						"ContactSensor",				"Contact"],
//        ["capability.doorControl",	  				"Door Control",					"DoorControl",					"Door"],
//        ["capability.energyMeter",					"Energy Meter",					"EnergyMeter",					"Energy"],
//        ["capability.estimatedTimeOfArrival",		"ETA",							"EstimatedTimeOfArrival",		"Eta"],
//        ["capability.garageDoorControl",			"Garage Door Control",			"GarageDoorControl",			"Door"],
        ["capability.illuminanceMeasurement",		"Illuminance",					"IlluminanceMeasurement",		"Illuminance"],
//        ["capability.imageCapture",					"Image Capture",				"ImageCapture",					"Image"],
//        ["capability.indicator",					"Indicator",					"Indicator",					"IndicatorStatus"],
//        ["capability.lock" ,						"Lock",							"Lock",							"Lock"],
//        ["capability.mediaController" ,				"Media Controller",				"MediaController",				["Activities", "CurrentActivity"] ],
//        ["capability.momentary" ,					"Momentary",					"Momentary",					""],
        ["capability.motionSensor",					"Motion",						"MotionSensor",					"Motion"],
//        ["capability.musicPlayer",					"Music Player",					"MusicPlayer",					["Level", "Mute", "Status", "TrackData", "TrackDescription"] ],
//        ["capability.pHMeasurement",				"pH Measurement",				"PHMeasurement",				"PH"],
//        ["capability.powerMeter",					"Power Meter",					"PowerMeter",					"Power"],
//        ["capability.power",						"Power",						"Power",						"PowerSource"],
        ["capability.presenceSensor",				"Presence",						"PresenceSensor",				"Presence"],
        ["capability.relativeHumidityMeasurement",	"Humidity",						"RelativeHumidityMeasurement",	"Humidity"],
//        ["capability.relaySwitch",					"Relay Switch",					"RelaySwitch",					"Switch"],
//        ["capability.sensor",						"Sensor",						"Sensor",						""],
//        ["capability.shockSensor",					"Shock Sensor",					"ShockSensor",					"Shock"],
//        ["capability.signalStrength",				"Signal Strength",				"SignalStrength",				""],
//        ["capability.sleepSensor",					"Sleep Sensor",					"SleepSensor",					"Sleeping"],
//        ["capability.smokeDetector",				"Smoke Detector",				"SmokeDetector",				"Smoke"],
//        ["capability.soundSensor",					"Sound Sensor",					"SoundSensor",					"Sound"],
//        ["capability.speechRecognition",			"Speech Recognition",			"SpeechRecognition",			"PhraseSpoken"],
//        ["capability.stepSensor",					"Step Sensor",					"StepSensor",					["Goal","Steps"] ],
        ["capability.switch",						"Switches", 					"Switch",						"Switch"],
        ["capability.switchLevel",					"Level",						"SwitchLevel",					"Level"],
//        ["capability.soundPressureLevel",			"Sound Pressure Level",			"SoundPressureLevel",			"SoundPressureLevel"],
//        ["capability.tamperAlert",					"Tamper Alert",					"TamperAlert",					"Tamper"],
        ["capability.temperatureMeasurement" , 		"Temperature", 					"TemperatureMeasurement",		"Temperature"],
//        ["capability.thermostat" , 					"Thermostat", 					"Thermostat",					["CoolingSetpoint","HeatingSetpoint","ThermostatFanMode","ThermostatMode","ThermostatOperatingState","ThermostatSetpoint"] ],
//        ["capability.thermostatCoolingSetpoint" , 	"Thermostat Cooling Setpoint", 	"ThermostatCoolingSetpoint",	"CoolingSetpoint"],
//        ["capability.thermostatFanMode" , 			"Thermostat Fan Mode", 			"ThermostatFanMode",			"ThermostatFanMode"],
//        ["capability.thermostatHeatingSetpoint" , 	"Thermostat Heating Setpoint", 	"ThermostatHeatingSetpoint",	"HeatingSetpoint"],
//        ["capability.thermostatMode" , 				"Thermostat Mode", 				"ThermostatMode",				"ThermostatMode"],
//        ["capability.thermostatOperatingState",		"Thermostat Operating State",	"ThermostatOperatingState",		"ThermostatOperatingState"],
//        ["capability.thermostatSetpoint",			"Thermostat Setpoint",			"ThermostatSetpoint",			"ThermostatSetpoint"],
//        ["capability.threeAxis",					"Three Axis",					"ThreeAxis",					"ThreeAxis"],
//        ["capability.tone",							"Tone",							"Tone",							""],
//        ["capability.touchSensor",					"Touch Sensor",					"TouchSensor",					"Touch"],
//        ["capability.trackingMusicPlayer",			"Tracking Music Player",		"TrackingMusicPlayer",			""],
//        ["capability.ultravioletIndex",				"Ultraviolet Index",			"UltravioletIndex",				"UltravioletIndex"],
//        ["capability.valve",						"Valve",						"Valve",						"Valve"],
//        ["capability.voltageMeasurement",			"Voltage Measurement",			"VoltageMeasurement",			"Voltage"],
//        ["capability.waterSensor",					"Water Sensor",					"Water",						"Water"],
//        ["capability.windowShade",					"Window Shade",					"WindowShade",					"WindowShade"],
    ]  
}



//creates user interface
preferences {
	page(name: "main")
	page(name: "displayConnectionInfoPage")
	page(name: "refreshHubitatTokenPage")
}

def main(){
	return (
		dynamicPage(name: "main", title: "<h2>Home Remote Integration</h2>", uninstall: true, install: true){

    		section("Enable Logging") {
        		input("logging", "bool", title: "Enable Logging for debugging", required: false, default:false) 
    		}
    		section("Allow Endpoint to Control These Things by Their Capabilities") {
        		for (cap in capabilities) {
            		input cap[2], cap[0], title: "Select ${cap[1]} Devices", multiple:true, required: false
        		}     
   		 	}   
          	section("<h2>Hubitat Urls & Bearer Tokens</h2>") {
				href "displayConnectionInfoPage", title: "Connection Info", description: "The Local URL, Cloud URL, and Bearer Token will show in the log."
				href "refreshHubitatTokenPage", title: "Refresh Hubitat Bearer Token", description: "Generates a new Bearer Token and displays it in the log."
			}
		}
	)
}

private displayConnectionInfoPage() {
	dynamicPage(name: "displayConnectionInfoPage", title: "") {
		section() {
			paragraph "The Local URL, Cloud URL, and Bearer Token have been displayed in the Logs."
			log.info "Local Url: ${localUrl}"
			log.info "Cloud Url: ${cloudUrl}"
			log.info "Bearer Token: ${bearerToken}"
		}
	}
}

private refreshHubitatTokenPage() {	
	dynamicPage(name: "refreshHubitatTokenPage", title: "") {
		section() {
			
			if (initializeAppEndpoint()) {
				paragraph "A new Hubitat url has been created and sent to the log."				
			} 
			else {
				paragraph "Please go to the Apps Code section of Hubitat, click 'Home Remote', Click OAuth, and then Enable.", title: "Please enable OAuth for Other Home Remote", required: true, state: null
			}	
			
			log.info "Local Url: ${localUrl}"
			log.info "Cloud Url: ${cloudUrl}"
			log.info "Bearer Token: ${bearerToken}"
		}
	}
}

private getCloudUrl() {
	def path = ""
	return "${fullApiServerUrl(path)}"
}

private getLocalUrl() {
	def path = ""
	return "${fullLocalApiServerUrl(path)}"
}

private getBearerToken() {
	return "${state.accessToken}"
}



//SYNC URL

def sync() {
	debug("sync requested")
	syncData = []

	def device
	
	syncGather.collect{ i ->
		temp = [:]
		device = i.id
		temp << [id: i.id, displayName: i.displayName]
		def attr = []
		def attr2 = [:]
		def cap = []
		def cap2 = [:]
		syncGather.each {
			if (it.id == device) {
			attr << it?.attribute
			cap << it?.capability
			}
		cap = cap.unique()
		cap2 << [capabilities: cap]
		temp << cap2
		attr = attr.unique()
		attr2 << [attributes: attr]
		temp << attr2
		}
		syncData << temp
	}
	syncData = syncData.unique()
	debug("sync data returned")
	return syncData
}


def getSyncGather() {
	def resp = []
	def attr
	allowedAttributes.each {	
		attr = it.attribute
		[it.capability].each {
			settings[it].collect{ i ->
				def devicedata = [:]
				devicedata << [displayName: i.displayName, id: i.id, capability: it, attribute: attr]
				resp << devicedata
			}
		}
	}
	return resp
}


//Poll URL

def poll() {
	debug("poll requested")
	syncData = []

	def device
	
	pollGather.collect{ i ->
		temp = [:]
		device = i.id
		temp << [ id: i.id ]
		def attr = [:]
		def attr2 = [:]
		pollGather.each {
			if (it.id == device) {
				attr << [(it?.attribute): it?.value]
			}
		attr2 << [attributes: attr]
		temp << attr2
		}
		syncData << temp
	}
	syncData = syncData.unique()
	debug("poll data returned")
	return syncData
}

def getPollGather() {
	def pollData = []
	def attr
	def val
	allowedAttributes.each {	
		attr = it.attribute
		[it.capability].each {
			settings[it].collect{ i ->
				if(i.currentState(attr.uncapitalize())?.value instanceof CharSequence) {
					val = i.currentState(attr.uncapitalize())?.value.capitalize()
				}
				else
				{ 
					val = i.currentState(attr.uncapitalize())?.value
				}
				def deviceData = [:]
				deviceData << [id: i.id, attribute: attr, value: (val)]
				pollData << deviceData
			}
		}
	}
	return pollData
}

// Allowed Attributes URL
def getAllowedAttributes() {
	def caps = []
	capabilities.each{
		caps << [capability: it[2], attribute: it[3] ]
	}
	return caps
}

// Execute Commands
def executeCommand() {    
	debug("execute command called")
    def deviceId = request.JSON?.deviceId
    def attribute = request.JSON?.attribute.uncapitalize() 
    def value
	
	if(request.JSON?.value instanceof CharSequence) {
		value = request.JSON?.value.uncapitalize()
	}
	else
	{ 
		value = request.JSON?.value
	}
	    
    if (deviceId) {
		def device = findDevice(deviceId)
        def command
        def valueIsParameter = false
        def valueIsInteger = false
        switch (attribute) {    	       	
        	case "hue":
        		command = "setHue"
                valueIsParameter = true
                valueIsInteger = true
        		break
    		case "saturation":
        		command = "setSaturation"
                valueIsParameter = true
                valueIsInteger = true
        		break
    		case "color":
        		command = "setColor"
                def rgb = hexToRgb(value)
                def hsv = rgbToHSV(rgb)
                value = [hue:hsv.h.toInteger(), saturation:hsv.s.toInteger()]
                valueIsParameter = true				
        		break
			case "colorTemperature":
				command = "setColorTemperature"
				valueIsParameter = true
                valueIsInteger = true
				break
			case "level":
        		command = "setLevel"
                valueIsParameter = true
                valueIsInteger = true
        		break            
        	case "heatingSetpoint":
        		command = "setHeatingSetpoint"
                valueIsParameter = true
        		break    
       		case "coolingSetpoint":
        		command = "setCoolingSetpoint"
                valueIsParameter = true
        		break
          	case "currentActivity":
        		command = "startActivity"
                valueIsParameter = true
        		break  
 	  		case "door":
        		command = getDoorControlCommand(value)
        		break    
      		case "lock":
        		command = getLockCommand(value)
        		break           
      		case "mute":
        		command = getMuteCommand(value)
        		break         
      		case "thermostatFanMode":
        		command = getThermostatFanModeCommand(value)
        		break         
       		case "thermostatMode":
        		if (value == "emergency heat") {
                	command = "emergencyHeat"
           		}
                else
                {
                    command = value
                }
        		break     
      		case "contact":
        		command = getContactCommand(value)
        		break
    		default:
        		command = value
		}
		
                if(valueIsParameter){
                	if(valueIsInteger){
                		device."$command"(value as int)
                	}
                	else{
                		device."$command"(value)
                	}   
                }
                else{
                	device."$command"()
        } 
    }
	debug("execute command complete")
	render contentType: "text/json", data: new JsonBuilder("status: 200").toPrettyString()
}

def getDoorControlCommand(value){
	def result
	switch (value) {
        case "closed":
        	result = "close"
        	break
    	case "open":
        	result = "open"
        	break
    	default:
        	result = value
	}    
	return result
}

def getLockCommand(value){
	def result
	switch (value) {
        case "locked":
        	result = "lock"
        	break
    	case "unlocked":
        	result = "unlock"
        	break
    	default:
        	result = value
	}    
	return result
}

def getMuteCommand(value){
	def result
	switch (value) {
        case "muted":
        	result = "mute"
        	break
    	case "unmuted":
        	result = "unmute"
        	break
    	default:
        	result = value
	}    
	return result
}

def getThermostatFanModeCommand(value){
	def result
	switch (value) {
        case "on":
        	result = "fanOn"
        	break
    	case "auto":
        	result = "fanAuto"
        	break
    	case "circulate":
        	result = "fanCirculate"
        	break
    	default:
        	result = value
	}    
	return result
}

def getContactCommand(value){
	def result
	switch (value) {
        case "closed":
        	result = "close"
        	break
    	case "open":
        	result = "open"
        	break
    	default:
        	result = value
	}    
	return result
}

def findDevice(id) {
    def device = null
    capabilities.find { 
        settings[it[2]].find { d ->
            if (d.id == id) {
                device = d
                return true
            }
        }
    }
    return device
}

def rgbToHSV(rgb) {
	def r = rgb.r / 255
    def g = rgb.g / 255
    def b = rgb.b / 255
    def h = 0
    def s = 0
    def v = 0
    
    def var_min = [r,g,b].min()
    def var_max = [r,g,b].max()
    def del_max = var_max - var_min
    
    v = var_max
    
    if (del_max == 0) {
            h = 0
            s = 0
    } else {
        def del_r = (((var_max - r) / 6) + (del_max / 2)) / del_max
        def del_g = (((var_max - g) / 6) + (del_max / 2)) / del_max
        def del_b = (((var_max - b) / 6) + (del_max / 2)) / del_max 
     	
        s = del_max / var_max;
        
        if (r == var_max) { h = del_b - del_g } 
        else if (g == var_max) { h = (1 / 3) + del_r - del_b } 
        else { h = (2 / 3) + del_g - del_r }
        
		if (h < 0) { h += 1 }
        if (h > 1) { h -= 1 }
	}
    def hsv = [:]    
    hsv = [h: h * 100, s: s * 100, v: v]
    
    hsv
}

def hexToRgb(colorHex) {
	def rrInt = Integer.parseInt(colorHex.substring(1,3),16)
    def ggInt = Integer.parseInt(colorHex.substring(3,5),16)
    def bbInt = Integer.parseInt(colorHex.substring(5,7),16)
    
    def colorData = [:]
    colorData = [r: rrInt, g: ggInt, b: bbInt]
    colorData
}



// Install/Uninstall/Update

def uninstalled() {
	debug("uninstalled")
}

def installed() {
	debug("installed")
	updated()
}

def updated() {
	initialize()	
}

def initialize() {
	debug("initialized")
	initializeAppEndpoint()
}

private initializeAppEndpoint() {	
	if (!state.accessToken) {
		try {			
			state.accessToken = createAccessToken()
		} 
		catch(e) {
			log.error "$e"
			state.accessToken = null
		}		
	}
	return state.accessToken
}



//Debugging

def debug(evt) {
	if (logging) {
    	log.debug evt
    }
}
