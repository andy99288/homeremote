plugin.OnChangeRequest = onChangeRequest;
plugin.OnConnect = onConnect;
plugin.OnDisconnect = onDisconnect;
plugin.OnPoll = onPoll;
plugin.OnSynchronizeDevices = onSynchronizeDevices;
plugin.PollingInterval = 3000;
plugin.Settings = { "LocalURL": "", "CloudURL": "", "AccessToken": "" };

var http = new HTTPClient();
var URL;
var LOG_ID = -1;
var CONN_ID = -2;

function getDevice(id) {
    return plugin.Devices[id];
}

function onChangeRequest(device, attribute, value) {
    log("Request Received");
    var options = { headers: { 'Authorization': "Bearer " + plugin.Settings["AccessToken"] } };
    var content = { "deviceId": device.id, "attribute": attribute, "value": value };
    var r = http.put(URL + "/executeCommand", content, options);
    device[attribute] = value;
    log("Request Complete");
}

function onConnect() {
    var options = { timeout: 3000, headers: { 'Authorization': "Bearer " + plugin.Settings["AccessToken"] } };

    	try {
        	log("Testing Local Connection")
        	var t = http.get(plugin.Settings["LocalURL"] + "/init", options);
       	if (t.status == 200) {
       		if (getDevice(CONN_ID) != null) {
       		var device = getDevice(CONN_ID);
       		var attr = "State"
       		device[attr] = "Local";
       		}
            	log("Connected Locally");
            	URL = plugin.Settings["LocalURL"];
            	return;
        	}
    	}
    	catch (err) {
       	log("Local Connection Failed.  Testing Cloud Connection.")
        	var t = http.get(plugin.Settings["CloudURL"] + "/init", options);
        	if (t.status == 200) {
       		if (getDevice(CONN_ID) != null) {
       		var device = getDevice(CONN_ID);
       		var attr = "State"
       		device[attr] = "Cloud";
       		}
          	log("Connected via Cloud");
            	URL = plugin.Settings["CloudURL"];
            	return;
        	}
    	}
   	log("Connection to Hubitat Failed")
}

function onDisconnect() {
}

function onPoll() {
    log("Poll Initialized");
    
    var lastPollID = "Last Poll"
    var device = getDevice(lastPollID)
    if (device == null) {
    	var lastPoll = "2000-01-01T05:00:00+0000";
    	}
    else
    {
    var attr = "Timestamp"
    var lastPoll = device[attr];
    }
    
    var options = { headers: { 'Authorization': "Bearer " + plugin.Settings["AccessToken"] } };
    var content = { "lastPoll": lastPoll};
    var s = http.put(URL + "/poll", content, options);
    log("Poll Data Received from Hubitat");
    var jsonArray = s.data;
    for (var g in jsonArray) {
        var jsonItem = jsonArray[g];
        var device = getDevice(jsonItem.id);
        for (var i in jsonItem.attributes) {
            var jsonAttr = i;
            var jsonAttrVal = jsonItem.attributes[i];
            if (device != null) {
                var attributeName = jsonAttr;
                device[attributeName] = jsonAttrVal;
            }
        }
    }
    log("Poll Complete");
}

function onSynchronizeDevices() {
    var options = { headers: { 'Authorization': "Bearer " + plugin.Settings["AccessToken"] } };

    try {
        var t = http.get(plugin.Settings["LocalURL"] + "/sync", options);
    }
    catch (err) {
        var t = http.get(plugin.Settings["CloudURL"] + "/sync", options);
    }


    var jsonArray = t.data;
    for (var f in jsonArray) {
        var jsonItem = jsonArray[f];
        var pluginDevice = new Device();
        pluginDevice.Id = jsonItem.id;
        pluginDevice.DisplayName = jsonItem.displayName;
        var caps = jsonItem.capabilities;

        if (caps.indexOf("SwitchLevel") >= 0) {
            pluginDevice.Icon = "light.png";
            pluginDevice.DeviceType = "Light";
            pluginDevice.TileTemplate = "LightTile.xaml";
            pluginDevice.DetailsTemplate = "LightDetails.xaml";
        }
        else {
            if (caps.indexOf("PresenceSensor") >= 0) {
                pluginDevice.Icon = "color.png";
                pluginDevice.DeviceType = "PresenceSensor";
                pluginDevice.TileTemplate = "PresenceSensorTile.xaml";
                //pluginDevice.DetailsTemplate = ;
            }
            else {
                if (caps.indexOf("ContactSensor") >= 0) {
                    pluginDevice.Icon = "lock.png";
                    pluginDevice.DeviceType = "ContactSensor";
                    pluginDevice.TileTemplate = "ContactSensorTile.xaml";
                    //pluginDevice.DetailsTemplate = ;
                }
//			removed option for Details Template "ThermostatDetails2" as fan mode doesn't work correctly with nest thermostat
//                else {
//                   	if (caps.indexOf("ThermostatFanMode") >= 0) {
//                        pluginDevice.Icon = "thermometer.png";
//                        pluginDevice.DeviceType = "Thermostat";
//                        pluginDevice.TileTemplate = "ThermostatTile.xaml";
//                        pluginDevice.DetailsTemplate = "ThermostatDetails2.xaml";
//                    }
			else {
                   		if (caps.indexOf("ThermostatHeatingSetpoint") >= 0 || caps.indexOf("ThermostatCoolingSetpoint") >= 0) {
                        	   pluginDevice.Icon = "thermometer.png";
                       	   pluginDevice.DeviceType = "Thermostat";
                        	   pluginDevice.TileTemplate = "ThermostatTile.xaml";
                        	   pluginDevice.DetailsTemplate = "ThermostatDetails.xaml";
                    		}
                		else {
                    	  		if (caps.indexOf("TemperatureMeasurement") >= 0) {
                       		   pluginDevice.Icon = "sunny.png";
                        		   pluginDevice.DeviceType = "Temperature";
                        		   pluginDevice.TileTemplate = "WeatherStationTile.xaml";
                        		   //pluginDevice.DetailsTemplate = ;
                    			}
                    	     		else {
                       	 		if (caps.indexOf("Switch") >= 0) {
                            		   pluginDevice.Icon = "power_button_with_circle.png";
                            		   pluginDevice.DeviceType = "Switch";
                            		   pluginDevice.TileTemplate = "OutletTile.xaml";
                            		   //pluginDevice.DetailsTemplate = ;
 //                           	}
                            }
                        }
                    }
                }
            }
        }
		
        pluginDevice.Capabilities = jsonItem.capabilities;
        pluginDevice.Attributes = jsonItem.attributes;

        plugin.Devices[pluginDevice.Id] = pluginDevice;
    }

//logging device
    var logDevice = new Device();
    logDevice.Id = LOG_ID;
    logDevice.DisplayName = "__Log";
    logDevice.Attributes = ["Log"];

    plugin.Devices[logDevice.Id] = logDevice;

//device to store local/cloud connection status
    var connDevice = new Device();
    connDevice.Id = CONN_ID;
    connDevice.DisplayName = "__Connection";
    connDevice.Attributes = ["State"];

    plugin.Devices[connDevice.Id] = connDevice;
}

function log(message) {
    var device = getDevice(LOG_ID);
    if (device == null) {
    return;
    }
    
    var d = new Date();
    var date = new Date().toISOString();
    var messageWithDate = date + "  \t" + message; 
    if (device.Log != null) {
        device.Log = device.Log + "\n" + messageWithDate;
    }
    else {
        device.Log = messageWithDate;
    }
}
